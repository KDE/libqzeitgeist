/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -i QtZeitgeist/DataModel/Event -i QtZeitgeist/DataModel/TimeRange -p loginterface.h: ../xml/org.gnome.zeitgeist.Log.xml
 *
 * qdbusxml2cpp is Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef LOGINTERFACE_H_1292511727
#define LOGINTERFACE_H_1292511727

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "QtZeitgeist/DataModel/Event"
#include "QtZeitgeist/DataModel/TimeRange"

/*
 * Proxy class for interface org.gnome.zeitgeist.Log
 */
class OrgGnomeZeitgeistLogInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.gnome.zeitgeist.Log"; }

public:
    OrgGnomeZeitgeistLogInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~OrgGnomeZeitgeistLogInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> DeleteEvents(const QtZeitgeist::DataModel::EventIdList &event_ids)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(event_ids);
        return asyncCallWithArgumentList(QLatin1String("DeleteEvents"), argumentList);
    }

    inline QDBusPendingReply<> DeleteLog()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("DeleteLog"), argumentList);
    }

    inline QDBusPendingReply<QtZeitgeist::DataModel::EventIdList> FindEventIds(const QtZeitgeist::DataModel::TimeRange &time_range, const QtZeitgeist::DataModel::EventList &event_templates, uint storage_state, uint num_events, uint result_type)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(time_range) << qVariantFromValue(event_templates) << qVariantFromValue(storage_state) << qVariantFromValue(num_events) << qVariantFromValue(result_type);
        return asyncCallWithArgumentList(QLatin1String("FindEventIds"), argumentList);
    }

    inline QDBusPendingReply<QtZeitgeist::DataModel::EventList> FindEvents(const QtZeitgeist::DataModel::TimeRange &time_range, const QtZeitgeist::DataModel::EventList &event_templates, uint storage_state, uint num_events, uint result_type)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(time_range) << qVariantFromValue(event_templates) << qVariantFromValue(storage_state) << qVariantFromValue(num_events) << qVariantFromValue(result_type);
        return asyncCallWithArgumentList(QLatin1String("FindEvents"), argumentList);
    }

    inline QDBusPendingReply<QStringList> FindRelatedUris(const QtZeitgeist::DataModel::TimeRange &time_range, const QtZeitgeist::DataModel::EventList &event_templates, const QtZeitgeist::DataModel::EventList &result_event_templates, uint storage_state, uint num_events, uint result_type)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(time_range) << qVariantFromValue(event_templates) << qVariantFromValue(result_event_templates) << qVariantFromValue(storage_state) << qVariantFromValue(num_events) << qVariantFromValue(result_type);
        return asyncCallWithArgumentList(QLatin1String("FindRelatedUris"), argumentList);
    }

    inline QDBusPendingReply<QtZeitgeist::DataModel::EventList> GetEvents(const QtZeitgeist::DataModel::EventIdList &event_ids)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(event_ids);
        return asyncCallWithArgumentList(QLatin1String("GetEvents"), argumentList);
    }

    inline QDBusPendingReply<QtZeitgeist::DataModel::EventIdList> InsertEvents(const QtZeitgeist::DataModel::EventList &events)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(events);
        return asyncCallWithArgumentList(QLatin1String("InsertEvents"), argumentList);
    }

    inline QDBusPendingReply<> InstallMonitor(const QDBusObjectPath &monitor_path, const QtZeitgeist::DataModel::TimeRange &time_range, const QtZeitgeist::DataModel::EventList &event_templates)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(monitor_path) << qVariantFromValue(time_range) << qVariantFromValue(event_templates);
        return asyncCallWithArgumentList(QLatin1String("InstallMonitor"), argumentList);
    }

    inline QDBusPendingReply<> Quit()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("Quit"), argumentList);
    }

    inline QDBusPendingReply<> RemoveMonitor(const QDBusObjectPath &monitor_path)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(monitor_path);
        return asyncCallWithArgumentList(QLatin1String("RemoveMonitor"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

namespace org {
  namespace gnome {
    namespace zeitgeist {
      typedef ::OrgGnomeZeitgeistLogInterface Log;
    }
  }
}
#endif
