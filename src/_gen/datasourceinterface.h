/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -p datasourceinterface.h: ../../xml/org.gnome.zeitgeist.DataSourceRegistry.xml
 *
 * qdbusxml2cpp is Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef DATASOURCEINTERFACE_H_1292432218
#define DATASOURCEINTERFACE_H_1292432218

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

#include "QtZeitgeist/DataModel/DataSource"

/*
 * Proxy class for interface org.gnome.zeitgeist.DataSourceRegistry
 */
class OrgGnomeZeitgeistDataSourceRegistryInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.gnome.zeitgeist.DataSourceRegistry"; }

public:
    OrgGnomeZeitgeistDataSourceRegistryInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~OrgGnomeZeitgeistDataSourceRegistryInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QtZeitgeist::DataModel::DataSourceList> GetDataSources()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("GetDataSources"), argumentList);
    }

    inline QDBusPendingReply<bool> RegisterDataSource(const QString &unique_id, const QString &name, const QString &description, const QtZeitgeist::DataModel::EventList &event_templates)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(unique_id) << qVariantFromValue(name) << qVariantFromValue(description) << qVariantFromValue(event_templates);
        return asyncCallWithArgumentList(QLatin1String("RegisterDataSource"), argumentList);
    }

    inline QDBusPendingReply<> SetDataSourceEnabled(const QString &unique_id, bool enabled)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(unique_id) << qVariantFromValue(enabled);
        return asyncCallWithArgumentList(QLatin1String("SetDataSourceEnabled"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void DataSourceDisconnected(const QtZeitgeist::DataModel::DataSourceList &in0);
    void DataSourceEnabled(const QString &unique_id, bool enabled);
    void DataSourceRegistered(const QtZeitgeist::DataModel::DataSourceList &in0);
};

namespace org {
  namespace gnome {
    namespace zeitgeist {
      typedef ::OrgGnomeZeitgeistDataSourceRegistryInterface DataSourceRegistry;
    }
  }
}
#endif
