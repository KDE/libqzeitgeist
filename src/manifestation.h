/*
 * This file was generated by onto2cpp tool.
 * Command line was: onto2cpp [('-o', 'Manifestation')]

 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */


#ifndef QTZEITGEIST_MANIFESTATION_H
#define QTZEITGEIST_MANIFESTATION_H


namespace QtZeitgeist
{


namespace Manifestation
{


namespace Event
{


/**
 * ZGEventManifestation
 *
 * Macro defining the Manifestation type <ulink url="http://www.zeitgeist-project.com/ontologies/2010/01/27/zg#EventManifestation">http://www.zeitgeist-project.com/ontologies/2010/01/27/zg&num;EventManifestation</ulink>
 *
 *	Base class for event manifestation types. Please do no instantiate directly, but use one of the sub classes. The manifestation of an event describes 'how it happened'. Fx. 'the user did this' or 'the system notified the user'.
 */
const char ZGEventManifestation[] = "http://www.zeitgeist-project.com/ontologies/2010/01/27/zg#EventManifestation";

/**
 * ZGHeuristicActivity
 *
 * Macro defining the Manifestation type <ulink url="http://www.zeitgeist-project.com/ontologies/2010/01/27/zg#HeuristicActivity">http://www.zeitgeist-project.com/ontologies/2010/01/27/zg&num;HeuristicActivity</ulink>
 *
 *	An event that is caused indirectly from user activity or deducted via analysis of other events. Fx. if an algorithm divides a user workflow into disjoint 'projects' based on temporal analysis it could insert heuristic events when the user changed project.
 */
const char ZGHeuristicActivity[] = "http://www.zeitgeist-project.com/ontologies/2010/01/27/zg#HeuristicActivity";

/**
 * ZGScheduledActivity
 *
 * Macro defining the Manifestation type <ulink url="http://www.zeitgeist-project.com/ontologies/2010/01/27/zg#ScheduledActivity">http://www.zeitgeist-project.com/ontologies/2010/01/27/zg&num;ScheduledActivity</ulink>
 *
 *	An event that was directly triggered by some user initiated sequence of actions. For example a music player automatically changing to the next song in a playlist.
 */
const char ZGScheduledActivity[] = "http://www.zeitgeist-project.com/ontologies/2010/01/27/zg#ScheduledActivity";

/**
 * ZGSystemNotification
 *
 * Macro defining the Manifestation type <ulink url="http://www.zeitgeist-project.com/ontologies/2010/01/27/zg#SystemNotification">http://www.zeitgeist-project.com/ontologies/2010/01/27/zg&num;SystemNotification</ulink>
 *
 *	An event send to the user by the operating system. Examples could include when the user inserts a USB stick or when the system warns that the hard disk is full.
 */
const char ZGSystemNotification[] = "http://www.zeitgeist-project.com/ontologies/2010/01/27/zg#SystemNotification";

/**
 * ZGUserActivity
 *
 * Macro defining the Manifestation type <ulink url="http://www.zeitgeist-project.com/ontologies/2010/01/27/zg#UserActivity">http://www.zeitgeist-project.com/ontologies/2010/01/27/zg&num;UserActivity</ulink>
 *
 *	An event that was actively performed by the user. For example saving or opening a file by clicking on it in the file manager.
 */
const char ZGUserActivity[] = "http://www.zeitgeist-project.com/ontologies/2010/01/27/zg#UserActivity";

/**
 * ZGWorldActivity
 *
 * Macro defining the Manifestation type <ulink url="http://www.zeitgeist-project.com/ontologies/2010/01/27/zg#WorldActivity">http://www.zeitgeist-project.com/ontologies/2010/01/27/zg&num;WorldActivity</ulink>
 *
 *	An event that was performed by an entity, usually human or organization, other than the user. An example could be logging the activities of other people in a team.
 */
const char ZGWorldActivity[] = "http://www.zeitgeist-project.com/ontologies/2010/01/27/zg#WorldActivity";


};

namespace Subject
{


/**
 * NCALAttachment
 *
 * Macro defining the Manifestation type <ulink url="http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#Attachment">http://www.semanticdesktop.org/ontologies/2007/04/02/ncal&num;Attachment</ulink>
 *
 *	An object attached to a calendar entity. This class has been introduced to serve as a structured value of the ncal:attach property. See the documentation of ncal:attach for details.
 */
const char NCALAttachment[] = "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#Attachment";

/**
 * NCALCalendarDataObject
 *
 * Macro defining the Manifestation type <ulink url="http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#CalendarDataObject">http://www.semanticdesktop.org/ontologies/2007/04/02/ncal&num;CalendarDataObject</ulink>
 *
 *	A DataObject found in a calendar. It is usually interpreted as one of the calendar entity types (e.g. Event, Journal, Todo etc.).
 */
const char NCALCalendarDataObject[] = "http://www.semanticdesktop.org/ontologies/2007/04/02/ncal#CalendarDataObject";

/**
 * NFOArchiveItem
 *
 * Macro defining the Manifestation type <ulink url="http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#ArchiveItem">http://www.semanticdesktop.org/ontologies/2007/03/22/nfo&num;ArchiveItem</ulink>
 *
 *	A file entity inside an archive.
 */
const char NFOArchiveItem[] = "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#ArchiveItem";

/**
 * NFODeletedResource
 *
 * Macro defining the Manifestation type <ulink url="http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#DeletedResource">http://www.semanticdesktop.org/ontologies/2007/03/22/nfo&num;DeletedResource</ulink>
 *
 *	A file entity that has been deleted from the original source. Usually such entities are stored within various kinds of 'Trash' or 'Recycle Bin' folders.
 */
const char NFODeletedResource[] = "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#DeletedResource";

/**
 * NFOEmbeddedFileDataObject
 *
 * Macro defining the Manifestation type <ulink url="http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#EmbeddedFileDataObject">http://www.semanticdesktop.org/ontologies/2007/03/22/nfo&num;EmbeddedFileDataObject</ulink>
 *
 *	A file embedded in another data object. There are many ways in which a file may be embedded in another one. Use this class directly only in cases if none of the subclasses gives a better description of your case.
 */
const char NFOEmbeddedFileDataObject[] = "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#EmbeddedFileDataObject";

/**
 * NFOFileDataObject
 *
 * Macro defining the Manifestation type <ulink url="http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#FileDataObject">http://www.semanticdesktop.org/ontologies/2007/03/22/nfo&num;FileDataObject</ulink>
 *
 *	A resource containing a finite sequence of bytes with arbitrary information, that is available to a computer program and is usually based on some kind of durable storage. A file is durable in the sense that it remains available for programs to use after the current program has finished.
 */
const char NFOFileDataObject[] = "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#FileDataObject";

/**
 * NFOHardDiskPartition
 *
 * Macro defining the Manifestation type <ulink url="http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#HardDiskPartition">http://www.semanticdesktop.org/ontologies/2007/03/22/nfo&num;HardDiskPartition</ulink>
 *
 *	A partition on a hard disk.
 */
const char NFOHardDiskPartition[] = "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#HardDiskPartition";

/**
 * NFOMediaStream
 *
 * Macro defining the Manifestation type <ulink url="http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#MediaStream">http://www.semanticdesktop.org/ontologies/2007/03/22/nfo&num;MediaStream</ulink>
 *
 *	A stream of multimedia content, usually contained within a media container such as a movie (containing both audio and video) or a DVD (possibly containing many streams of audio and video). Most common interpretations for such a DataObject include Audio and Video.
 */
const char NFOMediaStream[] = "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#MediaStream";

/**
 * NFORemoteDataObject
 *
 * Macro defining the Manifestation type <ulink url="http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#RemoteDataObject">http://www.semanticdesktop.org/ontologies/2007/03/22/nfo&num;RemoteDataObject</ulink>
 *
 *	A file data object stored at a remote location. Don't confuse this class with a RemotePortAddress. This one applies to a particular resource, RemotePortAddress applies to an address, that can have various interpretations.
 */
const char NFORemoteDataObject[] = "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#RemoteDataObject";

/**
 * NFORemotePortAddress
 *
 * Macro defining the Manifestation type <ulink url="http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#RemotePortAddress">http://www.semanticdesktop.org/ontologies/2007/03/22/nfo&num;RemotePortAddress</ulink>
 *
 *	An address specifying a remote host and port. Such an address can be interpreted in many ways (examples of such interpretations include mailboxes, websites, remote calendars or filesystems), depending on an interpretation, various kinds of data may be extracted from such an address.
 */
const char NFORemotePortAddress[] = "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#RemotePortAddress";

/**
 * NFOSoftwareItem
 *
 * Macro defining the Manifestation type <ulink url="http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#SoftwareItem">http://www.semanticdesktop.org/ontologies/2007/03/22/nfo&num;SoftwareItem</ulink>
 *
 *	A DataObject representing a piece of software. Examples of interpretations of a SoftwareItem include an Application and an OperatingSystem.
 */
const char NFOSoftwareItem[] = "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#SoftwareItem";

/**
 * NFOSoftwareService
 *
 * Macro defining the Manifestation type <ulink url="http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#SoftwareService">http://www.semanticdesktop.org/ontologies/2007/03/22/nfo&num;SoftwareService</ulink>
 *
 *	A service published by a piece of software, either by an operating system or an application. Examples of such services may include calendar, addresbook and mailbox managed by a PIM application. This category is introduced to distinguish between data available directly from the applications (Via some Interprocess Communication Mechanisms) and data available from files on a disk. In either case both DataObjects would receive a similar interpretation (e.g. a Mailbox) and wouldn't differ on the content level.
 */
const char NFOSoftwareService[] = "http://www.semanticdesktop.org/ontologies/2007/03/22/nfo#SoftwareService";

/**
 * NMOMailboxDataObject
 *
 * Macro defining the Manifestation type <ulink url="http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#MailboxDataObject">http://www.semanticdesktop.org/ontologies/2007/03/22/nmo&num;MailboxDataObject</ulink>
 *
 *	An entity encountered in a mailbox. Most common interpretations for such an entity include Message or Folder.
 */
const char NMOMailboxDataObject[] = "http://www.semanticdesktop.org/ontologies/2007/03/22/nmo#MailboxDataObject";


};


};


};

#endif // QTZEITGEIST_MANIFESTATION_H
